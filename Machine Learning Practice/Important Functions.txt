
Dataset Functions:

dataset.shape
dataset.dtypes
dataset.head()
dataset.info()
dataset.describe()

dataset.isnull().sum()
_____________________________________________________________________________

Regression PLOTS:

Seaborn Graph:
sns.pairplot(dataset, x_vars='YearsExperience', y_vars='Salary')
plt.show()

---
sns.pairplot(dataset)
plt.show()

Plotting Graphs:

plt.plot(y_test,color = 'blue')
plt.plot(y_pred,color = 'red')

_____________________________________________________________________________


____________________________________________________________________________

Printing Actual and Predicted Values:

print("Actual_Value\tPredicted_value\tDifference")
for x, y in zip(y_test, y_pred):
    #print(x, y, sep='\t\t')
    print('{:0.2f}\t{:0.2f}\t{:0.2f}'.format(x, y,x-y))


----
df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df

_____________________________________________________________________________

Data Preprocessing:

Get columns -
	dataset.columns

Drop Columns -
	dropColumns = ['id', 'date', 'zipcode']
	dataset.drop(dropColumns, axis=1, inplace=True)
	dataset.head()


Check Total Null values in each columns - 
	dataset.isnull().sum()
_____________________________________________________________________________


Classification Charts:

EX: Gender, Age, EstimatedSalary Purchased

sns.catplot(x="Purchased", y="Age", data=dataset)
plt.show()

sns.catplot(x="Purchased", y="Age", hue="Gender",data=dataset )
plt.show()

sns.stripplot(x=dataset["Purchased"])
plt.show()

sns.stripplot(y=dataset["Age"])
plt.show()

sns.stripplot(x="Purchased", y="Age", data=dataset)
plt.show()

sns.stripplot(x="Purchased", y="Age", hue="Gender",data=dataset )
plt.show()

sns.swarmplot(y=dataset["Age"])
plt.show()

sns.swarmplot(x="Purchased", y="Age", data=dataset)
plt.show()

sns.swarmplot(x="Purchased", y="Age", hue="Gender",data=dataset )
plt.show()

sns.boxplot(y=dataset["Age"])
plt.show()

sns.boxplot(x="Purchased", y="Age", data=dataset)
plt.show()

sns.pointplot(y=dataset["Age"])
plt.show()

sns.pointplot(x="Purchased", y="Age", data=dataset)
plt.show()

sns.pointplot(x="Purchased", y="Age",hue='Gender', data=dataset)
plt.show()

sns.barplot(x="Purchased", y="Age",hue='Gender', data=dataset)
plt.show()

sns.countplot(x=dataset["Age"])
plt.show()

sns.countplot(y=dataset["Purchased"])
plt.show()

sns.countplot(x="Purchased",data=dataset)
plt.show()

sns.pairplot(dataset, hue = 'Gender')
plt.show()

IMP: 
sns.pairplot(dataset, hue = 'Purchased')
plt.show()

VISUALIZE CONFUSION MATRIX:
sns.heatmap(cm, annot=True, square=True, fmt='g', cmap="Blues")
plt.title('Confusion Matri ')
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.show()




…or create a new repository on the command line
echo "# MachineLearningPlay" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/venkateshmudaliar/MachineLearningPlay.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/venkateshmudaliar/MachineLearningPlay.git
git branch -M main
git push -u origin main
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.